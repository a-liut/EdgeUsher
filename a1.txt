:- use_module(library(lists)).

%determina possibili placement verificando vincoli di Things e di HW (cumulativi) sui nodi

%query(findPlacement(P)).

findPlacement(Placement) :-
    findall(s(X,Y,W),service(X,Y,W),Services),
    place(Services,Placement,[]).

place([],[],_).
place([s(C,HReqs,TReqs)|Cs],[on(C,X)|Ps],Alloc) :-
	place1(s(C,HReqs,TReqs),X,Alloc),
	place(Cs,Ps,[(X,HReqs)|Alloc]).

place1(s(C,HReqs,TReqs),X,Alloc) :-
	node(X,_,HCaps,TCaps),
	subset(TReqs,TCaps),
	sumAllocated(X,Alloc,TotAllocX),
	UpdatedHCaps is HCaps-TotAllocX,
	HReqs < UpdatedHCaps.

subset([],_).
subset([R|Rs],TCaps) :-
	member(R,TCaps),
	subset(Rs,TCaps).
	
sumAllocated(X,[],0).
sumAllocated(X,[(X,K)|Ls],NewS) :-
	sumAllocated(X,Ls,S),
	NewS is S+K.
sumAllocated(X,[(Y,K)|Ls],S) :-
   	X \== Y,
	sumAllocated(X,Ls,S).

findpath(X,Y,Path, L, B) :-
       path(X,Y,[X],Q,L,B), 
       reverse(Q,Path),
	   X \== Y.

path(X, Y, P,[Y|P], L, B) :- 
	link(X, Y, L, B).
path(X, Y, Visited, Path, L, B) :-
	link(X, Z, Lxz, Bxz),           
	Z \== Y,
	\+ member(Z,Visited),
	path(Z,Y,[Z|Visited],Path, Lzy, Bzy),
	L is Lxz + Lzy,
	B is min(Bxz, Bzy).

query(findpath(edge1, N, P, L, B)).



% services
service(s1, 3, [thing1]).
service(s2, 4, [thing2]).
service(s3, 7, []).

% infrastructure/nodes
%node(fog1, opA, 7, [thing1]).
%node(fog2, opB, 12, [thing2]).
%node(cloud1, opC, 100000, []).

%link(fog1, fog2, 11, 12).
%link(fog2, cloud1, 60, 8).
%link(fog1, cloud1, 90, 8).
%link(cloud1, fog1, 90, 8).

node(cloud0, OpB, 10000, []).
node(edge1, OpB, 48, [t5, t4]).
node(edge2, OpB, 8, []).
node(edge3, OpB, 5, [t3]).
node(edge4, OpB, 6, []).
link(cloud0, edge1, 147, 40).
link(edge1, cloud0, 132, 28).
link(cloud0, edge3, 26, 39).
link(edge3, cloud0, 99, 43).
link(cloud0, edge4, 84, 34).
link(edge4, cloud0, 50, 10).
link(edge1, edge3, 143, 50).
link(edge3, edge1, 95, 16).
link(edge1, edge4, 53, 16).
link(edge4, edge1, 44, 6).
link(edge2, edge3, 43, 7).
link(edge3, edge2, 62, 45).
link(edge2, edge4, 46, 31).
link(edge4, edge2, 12, 9).
link(edge3, edge4, 2, 4).
link(edge4, edge3, 18, 26).